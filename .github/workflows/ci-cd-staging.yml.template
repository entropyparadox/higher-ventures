name: CI/CD for staging

concurrency:
  group: ci-cd-for-staging
  cancel-in-progress: true

on:
  push:
    branches:
      - dev
    paths:
      - 'starter-api/**'

jobs:
  # test:
    # name: Run testing
    # timeout-minutes: 60
    # runs-on: ubuntu-latest
    # env:
      # working-directory: ./starter-api

    # steps:
      # - name: Checkout
        # uses: actions/checkout@v1

      # - name: Run Containers
        # run: docker-compose -f "docker-compose.yml" up -d --build
        # working-directory: ${{ env.working-directory }}

      # - name: Install node
        # uses: actions/setup-node@v1
        # with:
          # node-version: 16.x

      # - name: Install dependencies
        # run: npm install
        # working-directory: ${{ env.working-directory }}

      # - name: Create envfile
        # run: |
          # touch .env
          # echo APP_ENV="test" >> .env
          # echo TZ="UTC" >> .env
          # echo JWT_SECRET="testsecret" >> .env
          # echo TEST_DB_HOST="localhost" >> .env
          # echo TEST_DB_DATABASE="starter-test-db" >> .env
          # echo TEST_DB_DIALECT="mysql" >> .env
          # echo TEST_DB_PORT="33081" >> .env
          # echo TEST_DB_USERNAME="user" >> .env
          # echo TEST_DB_PASSWORD="password" >> .env
        # working-directory: ${{ env.working-directory }}

      # - name: Run test
        # run: sudo npm run test
        # working-directory: ${{ env.working-directory }}

      # - name: Stop containers
        # if: always()
        # run: docker-compose -f "docker-compose.yml" down
        # working-directory: ${{ env.working-directory }}

  # deploy:
  #   name: Deploy to server
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   needs: [test]

  #   steps:
  #     - name: Run scripts in server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         key: ${{ secrets.AWS_KEY }}
  #         host: ${{ secrets.AWS_STAGE_HOST }}
  #         username: ec2-user
  #         script: |
  #           ./app-stage/starter-api/deploy/auto-deploy-stage.sh
